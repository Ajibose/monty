#include "monty.h"
#include <stdio.h>

/*int getlines(char **lineptr, size_t *n, char *pathname, FILE **stream)
{
	int read;

	*stream = fopen(pathname, "r");
	if (*stream == NULL)
	{
		fprintf(stderr, "Error: Can't open file %s", pathname);
		exit(EXIT_FAILURE);
	}

	read = getline(lineptr, n, *stream);
        if (read == -1 && errno == 0)
        {
                if (errno == 0)
                        return (-1);
                return (-1);
        }
        return (1);
}*/


/**
 * frees - frees up a 2D array
 * @str: The array to free
 *
 * Return: none
 */
void frees(char **str)
{
        int i = 0;

        if (str != NULL)
        {
                while (str[i])
                {
                        free(str[i]);
                        i++;
                }
        }
        free(str);
}

/**
 * free_dlistint - Frees a double linked list
 * @head: pointer to the head node
 *
 * Return: void
 */
void free_dstack_t(stack_t *head)
{
        stack_t *ptr;

        if (head != NULL)
                while (head != NULL)
                {
                        ptr = head;
                        head = head->next;
                        free(ptr);
                }
}

const instruction_t opcodes[] = {
	{"push", push},
	{"pall", pall},
	{NULL, NULL}
};

void opcode_exec(stack_t **stack, char *str, unsigned int count)
{
	int i = 0;

	while (opcodes[i].opcode != NULL)
	{
		if (strcmp(opcodes[i].opcode, str) == 0)
		{
			opcodes[i].f(stack, count);
			return;
		}
		i++;
	}
	/*fprintf(stderr, "L%d: unknown instruction %s\n", count, str);
	free_dstack_t(*stack);
	exit(EXIT_FAILURE);*/
}

void push(stack_t **stack, unsigned int count)
{
	int arg;
	char *n = global.argument;

	if (isdigit(*n) == 0)
	{
		fprintf(stderr, "L%d: usage: push integer", count);
		exit(EXIT_FAILURE);
	}
	arg = atoi(n);
	if (add_dnodeint(stack, arg) == NULL)
		exit(EXIT_FAILURE);
}

/**
 * print_dlistint - count the number of nodes in a linked list
 * @h: pointer to the head node
 *
 * Return: size of the linked list
 */
void pall(stack_t **h, unsigned int count __attribute__((unused)))
{
        stack_t *ptr = *h;

        if (*h != NULL)
                while (ptr != NULL)
                {
                        printf("%d\n", ptr->n);
                        ptr = ptr->next;
                }
}


/*void pall(stack_t **stack, unsigned int count)*/

/**
  add_dnodeint - Adds a new node at the beginning of a linked list
 * @head: double pointer to the head node
 * @n: the new node data
 *
 * Return: address of the new node
 */
stack_t *add_dnodeint(stack_t **head, int n)
{
        stack_t *temp;

        temp = malloc(sizeof(stack_t));
        if (temp == NULL)
        {
		fprintf(stderr, "Error: malloc failed");
                free(temp);
                return (NULL);
        }

	temp->n = n;
        temp->next = *head;
        temp->prev = NULL;

        if (*head != NULL)
                (*head)->prev = temp;

        *head = temp;
        return (temp);
}

int check_opcode(char *str)
{
	int i = 0;

	while (opcodes[i].opcode != NULL)
	{
		if (strcmp(opcodes[i].opcode, str) == 0)
			return (1);
		i++;
	}
	return (0);
}


void interpreter(char *str)
{
	size_t n = 0;
	char *line = NULL, *op;
	stack_t *stack = NULL;
	FILE *stream;
	unsigned int count = 1;

	stream = fopen(str, "r");
	if (stream == NULL)
	{
		fprintf(stderr, "Error: Can't open file %s", str);
		exit(EXIT_FAILURE);
	}
	while ((getline(&line, &n, stream)) != -1)
	{
		if (*line == '\n')
		{
			count++;
			continue;
		}
		op = strtok(line, " \t\n");
		global.argument = strtok(NULL, " \t\n");
		if (op != NULL)
			printf("%s\n", op);
		if (global.argument != NULL)
				printf("%s\n", global.argument);

		if (check_opcode(op) == 1)
			opcode_exec(&stack, op, count);
		else
		{
			fprintf(stderr, "L%d: unknown instruction %s\n", count, str);
			free_dstack_t(stack);
			fclose(stream);
			free(line);
			exit(EXIT_FAILURE);
		}
		count++;
	}
	free_dstack_t(stack);
	fclose(stream);
	free(line);
}

int main(int ac, char *argv[])
{
	if (ac != 2)
	{
		fprintf(stderr, "USAGE: monty file");
		exit(EXIT_FAILURE);
	}

	interpreter(argv[1]);
	return (0);
}
